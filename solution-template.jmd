---
title: "BEE 4750/5750 Homework 0"
author: "Ian Shen-Costello (iys2)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1

```julia;

function square_number(x)
  output = x^2;
  return output
end
```
## Problem 1.2

We can see that $x^2 =$ `j square_number(5)`.

## Problem 1.3

```julia;
p = [];

for i in -10:10
  push!(p,square_number(i))
end

using Plots
plot(p, xlabel = "x", ylabel = "y", label = "a legend in the top left", legend = :topleft)

```

# Problem 2

## Problem 2.1

If guess is $a$ is greater than the desired outcome $\sqrt{x}$, 

## Problem 2.2

```julia;

function newton(x, a)

tolerance = 0.1
  while true
    
    if abs(sqrt(x)-a) <= tolerance
      break
    else
      new_a = ((x/a) + a)/2
      a = new_a
      println(a)
    end
    
  end

  return(a)

end

newton(2, 1, 0.1)
```


# Problem 3

## Problem 3.1
```julia;
vec = rand(20)
```
## Problem 3.2
```julia;

function mean(x)
  sum = 0
  for i in length(x)
    sum = sum + x[i]
  end

  m = sum/length(x)
  return m

end

mean(vec)

function demean(x)
  avg = mean(x)
  for i in x
    x[i] = x[i]-avg
  end

  return x
end

demean(vec)
```

## Problem 3.3
```julia;
vec = zeros(10)
vec[3:8] .= 1
```
## Problem 3.4
```julia;
mat = rand(5,5)

for col in eachcol(mat)

  m = mean(col)

  for i in length(col)
    col[i] = col[i] - m
  end

end
```

# Problem 4

## Problem 4.1
```julia;
import Pkg
Pkg.activate(".")
Pkg.instantiate()

using Distributions
using Plots

my_normal = Normal(3.5, 1)

rand(my_normal)
rand(my_normal, 100)

mu = log(0.03)
sig = 0.005

my_lognormal = LogNormal(mu, sig)
pl = rand(my_lognormal, 100)

plot(pl)
```

## Problem 4.2
```julia;

function phos(a,b,q,y,t,x)
p = zeros(t)
  for i = 1:t 
     p[i] = x + a + y[i] + (x^q)/(1+x^q) - b*x
     x = p[i]
  end

return p
end
```

## Problem 4.3

```julia;
#Use above function with given parameters and a starting concentration of 10
phosphorous = phos(0.4, 0.42, 2, pl, 100, 10)

plot(phosphorous, xlabel = "Time (years)", ylabel = "Phosphorous Concentration", legend = false)

```

# References